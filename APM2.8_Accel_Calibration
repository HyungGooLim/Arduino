#include <AP_Common.h>
#include <AP_Math.h>
#include <AP_Param.h>
#include <AP_Progmem.h>
#include <AP_HAL.h>
#include <AP_HAL_AVR.h>
#include <AP_ADC.h>
#include <AP_InertialSensor.h>
const AP_HAL::HAL& hal = AP_HAL_AVR_APM2;
AP_InertialSensor_MPU6000 ins;
int16_t user_input;
void setup()
{
hal.console -> println("AP_InertialSensor start up...");
ins.init(AP_InertialSensor::COLD_START, AP_InertialSensor::RATE_100HZ, NULL);
hal.console -> println("\n complete, Reading : ");
}

void loop()
{
hal.console -> println (" Menu ");
hal.console -> println (" c) calibrate accelerometers ");
hal.console -> println (" t) test ");
while(!hal.console -> available())
{
hal.scheduler -> delay(20);
}
while( hal.console -> available())
{
user_input = hal.console -> read();
if ( user_input =='c' || user_input =='C' )
{
run_calibration();
display_offsets();
}
if ( user_input =='t' || user_input =='T' )
{
run_test();
}
}
}
AP_HAL_MAIN();



void run_calibration()
{
float roll_trim, pitch_trim;
AP_InertialSensor_UserInteractStream interact(hal.console);
ins.calibrate_accel(NULL, &interact, roll_trim, pitch_trim);
}
void display_offsets()
{
Vector3f accel_offsets = ins.get_accel_offsets();
hal.console -> print("\n Accel Offsets X = "); hal.console -> print(accel_offsets.x, 5);
hal.console -> print("\t Accel Offsets Y = "); hal.console -> print(accel_offsets.y, 5);
hal.console -> print("\t Accel Offsets Z = "); hal.console -> println(accel_offsets.z, 5);
}
void run_test()
{
Vector3f accel;
while( !hal.console -> available())
{
ins.update();
accel = ins.get_accel();
hal.console -> print("Accel:");
hal.console -> print("\t x ="); hal.console -> print(accel.x);
hal.console -> print("\t y ="); hal.console -> print(accel.y);
hal.console -> print("\t z ="); hal.console -> println(accel.z);
hal.scheduler -> delay(500);
}
}
